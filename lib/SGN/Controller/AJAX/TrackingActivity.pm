
package SGN::Controller::AJAX::TrackingActivity;

use Moose;
use CXGN::Stock::Order;
use CXGN::Stock::OrderBatch;
use Data::Dumper;
use JSON;
use DateTime;
use CXGN::People::Person;
use CXGN::Contact;
use CXGN::Trial::Download;
use CXGN::TrackingActivity::AddTrackingIdentifier;
use CXGN::TrackingActivity::ActivityInfo;
use CXGN::TrackingActivity::AddActivityProject;
use CXGN::TrackingActivity::ActivityProject;
use CXGN::TrackingActivity::TrackingIdentifier;
use CXGN::Transformation::CreateAutogeneratedNames;
use CXGN::Transformation::Transformation;
use SGN::Model::Cvterm;
use CXGN::Location::LocationLookup;
use CXGN::List;
use CXGN::Stock::Status;

use File::Basename qw | basename dirname|;
use File::Copy;
use File::Slurp;
use File::Spec::Functions;
use Digest::MD5;
use File::Path qw(make_path);
use File::Spec::Functions qw / catfile catdir/;

use LWP::UserAgent;
use LWP::Simple;
use HTML::Entities;
use URI::Encode qw(uri_encode uri_decode);
use Tie::UrlEncoder; our(%urlencode);


BEGIN { extends 'Catalyst::Controller::REST' }

__PACKAGE__->config(
    default   => 'application/json',
    stash_key => 'rest',
    map       => { 'application/json' => 'JSON', 'text/html' => 'JSON' },
   );


sub create_tracking_activity_project : Path('/ajax/tracking_activity/create_tracking_activity_project') : ActionClass('REST'){ }

sub create_tracking_activity_project_POST : Args(0) {
    my $self = shift;
    my $c = shift;
    my $schema = $c->dbic_schema('Bio::Chado::Schema', 'sgn_chado');
    my $dbh = $c->dbc->dbh;
    my $project_name = $c->req->param("project_name");
    my $activity_type = $c->req->param("activity_type");
    my $breeding_program_id = $c->req->param("breeding_program");
    my $project_location = $c->req->param("project_location");
    my $year = $c->req->param("year");
    my $project_description = $c->req->param("project_description");

    my $user = $c->user();
    if (!$user) {
        $c->res->redirect( uri( path => '/user/login', query => { goto_url => $c->req->uri->path_query } ) );
        return;
    }

    if (!($user->has_role('submitter') or $user->has_role('curator'))) {
        $c->stash->{rest} = { error => "You do not have sufficient privileges to create tracking activity project." };
        return;
    }

    my $program_name = $schema->resultset('Project::Project')->find({project_id => $breeding_program_id})->name();
    my @user_roles = $c->user->roles();
    my %has_roles = ();
    map { $has_roles{$_} = 1; } @user_roles;

    if (! ( (exists($has_roles{$program_name}) && exists($has_roles{submitter})) || exists($has_roles{curator}))) {
        $c->stash->{rest} = { error => "You need to be either a curator, or a submitter associated with breeding program $program_name to add tracking project." };
        return;
    }

    my $user_id = $c->user()->get_object()->get_sp_person_id();

    my $geolocation_lookup = CXGN::Location::LocationLookup->new(schema =>$schema);
    $geolocation_lookup->set_location_name($project_location);
    if(!$geolocation_lookup->get_geolocation()){
        $c->stash->{rest}={error => "Location not found"};
        return;
    }

    my $return;
    eval{
        my $add_activity_project = CXGN::TrackingActivity::AddActivityProject->new({
            bcs_schema => $schema,
            dbh => $dbh,
            breeding_program_id => $breeding_program_id,
            year => $year,
            project_description => $project_description,
            activity_project_name => $project_name,
            activity_type => $activity_type,
            nd_geolocation_id => $geolocation_lookup->get_geolocation()->nd_geolocation_id(),
            owner_id => $user_id
        });

        $return = $add_activity_project->save_activity_project();
    };

    if (!$return){
        $c->stash->{rest} = {error => "Error saving project",};
        return;
    }

    if ($return->{error}){
        $c->stash->{rest} = {error => $return->{error}};
        return;
    }

    if ($@) {
        $c->stash->{rest} = {error => $@};
        return;
    } else {
        $c->stash->{rest} = {success => 1};
    }


}


sub generate_tracking_identifiers : Path('/ajax/tracking_activity/generate_tracking_identifiers') : ActionClass('REST'){ }

sub generate_tracking_identifiers_POST : Args(0) {
    my $self = shift;
    my $c = shift;
    my $project_name = $c->req->param("project_name");
    my $list_id = $c->req->param("list_id");
    my $program_name = $c->req->param("program_name");

    if (!$c->user()) {
        $c->stash->{rest} = { error => "You must be logged in to generate tracking identifiers." };
        return;
    }
    if (!($c->user()->has_role('submitter') or $c->user()->has_role('curator'))) {
        $c->stash->{rest} = { error => "You do not have sufficient privileges to add tracking identifiers." };
        return;
    }

    my @user_roles = $c->user->roles();
    my %has_roles = ();
    map { $has_roles{$_} = 1; } @user_roles;

    if (! ( (exists($has_roles{$program_name}) && exists($has_roles{submitter})) || exists($has_roles{curator}))) {
        $c->stash->{rest} = { error => "You need to be either a curator, or a submitter associated with breeding program $program_name to add tracking identifiers." };
        return;
    }

    my $user_id = $c->user()->get_object()->get_sp_person_id();
    my $schema = $c->dbic_schema('Bio::Chado::Schema', 'sgn_chado');
    my $phenome_schema = $c->dbic_schema("CXGN::Phenome::Schema");
    my $dbh = $c->dbc->dbh();

    my $project_id;
    my $project_rs = $schema->resultset("Project::Project")->find( { name => $project_name });
    if (!$project_rs) {
        $c->stash->{rest} = { error => "Error! Project name: $project_name was not found in the database.\n" };
        return;
    } else {
        $project_id = $project_rs->project_id();
    }

    my $activity_project = CXGN::TrackingActivity::ActivityProject->new(bcs_schema => $schema, trial_id => $project_id);
    my $all_identifiers = $activity_project->get_project_active_identifiers();
    my $last_number = scalar (@$all_identifiers);

    my $list = CXGN::List->new( { dbh=>$dbh, list_id=>$list_id });
    my $material_names = $list->elements();

    my @check_identifier_names;
    my @tracking_identifiers;
    my @error_messages;
    foreach my $name (sort @$material_names) {
        $last_number++;
#        my $tracking_id = $project_name.":".$name."_"."T".(sprintf "%04d", $last_number);
        my $tracking_id = $project_name.":".$name."_"."T".$last_number;
        push @tracking_identifiers, [$tracking_id, $name];
        push @check_identifier_names, $tracking_id;
    }

    my $rs = $schema->resultset("Stock::Stock")->search({
        'is_obsolete' => { '!=' => 't' },
        'uniquename' => { -in => \@check_identifier_names }
    });
    while (my $r=$rs->next){
        push @error_messages, "Tracking identifier name already exists in database: ".$r->uniquename;
    }

    if (scalar(@error_messages) >= 1) {
        $c->stash->{rest} = { error => \@error_messages};
        return;
    }

    foreach my $identifier_info (@tracking_identifiers) {
        my $tracking_identifier = $identifier_info->[0];
        my $material = $identifier_info->[1];

        my $tracking_obj = CXGN::TrackingActivity::AddTrackingIdentifier->new({
            schema => $schema,
            phenome_schema => $phenome_schema,
            tracking_identifier => $tracking_identifier,
            material => $material,
            project_id => $project_id,
            user_id => $user_id
         });

        my $return = $tracking_obj->store();
        if (!$return) {
            $c->stash->{rest} = {error => "Error generating tracking identifier"};
            return;
        } elsif ($return->{error}) {
            my $error = $return->{error};
            $c->stash->{rest} = {error => $error};
            return;
        }
    }

    $c->stash->{rest} = { success => 1};

}


sub activity_info_save : Path('/ajax/tracking_activity/save') : ActionClass('REST'){ }

sub activity_info_save_POST : Args(0) {
    my $self = shift;
    my $c = shift;
    my $tracking_identifier = $c->req->param("tracking_identifier_name");
    my $tracking_identifier_id = $c->req->param("tracking_identifier_id");
    my $selected_type = $c->req->param("selected_type");
    my $input = $c->req->param("input");
    my $notes = $c->req->param("notes");
    my $record_timestamp = $c->req->param("record_timestamp");
    my $activity_type = $c->req->param("activity_type");
    my $program_name = $c->req->param("program_name");
    my $source_info = $c->req->param("source_info");
    my $material_name = $c->req->param("material_name");
    my $tracking_transformation = $c->config->{tracking_transformation};

    if (!$c->user()) {
        $c->stash->{rest} = { error => "You must be logged in to add new information." };
        return;
    }
    if (!($c->user()->has_role('submitter') or $c->user()->has_role('curator'))) {
        $c->stash->{rest} = { error => "You do not have sufficient privileges to record new information." };
        return;
    }

    my @user_roles = $c->user->roles();
    my %has_roles = ();
    map { $has_roles{$_} = 1; } @user_roles;

    if (! ( (exists($has_roles{$program_name}) && exists($has_roles{submitter})) || exists($has_roles{curator}))) {
        $c->stash->{rest} = { error => "You need to be either a curator, or a submitter associated with breeding program $program_name to record new information." };
        return;
    }

    my $user_id = $c->user()->get_object()->get_sp_person_id();

    if ($selected_type =~ m/number/ && !($input =~ /^\d+?$/) ) {
        $c->stash->{rest} = {error => "Input is not a positive integer"};
        return;
    }

    my $schema = $c->dbic_schema('Bio::Chado::Schema', 'sgn_chado');
    my $phenome_schema = $c->dbic_schema("CXGN::Phenome::Schema");
    my $dbh = $c->dbc->dbh();
    my $number_of_transformants;
    my $number_of_plantlets;
    if (($selected_type eq 'number_of_transformants') && $tracking_transformation) {
        $number_of_transformants = $input;
        my $tracking_identifier_obj = CXGN::TrackingActivity::TrackingIdentifier->new({schema => $schema, dbh => $dbh, tracking_identifier_stock_id => $tracking_identifier_id});
        my $project_and_program_info = $tracking_identifier_obj->get_associated_project_program();
        my $program_id = $project_and_program_info->[0]->[2];
        my $linked_project_id = $project_and_program_info->[0]->[4];
        my $autogenerated_name_format_cvterm_id = SGN::Model::Cvterm->get_cvterm_row($schema, 'autogenerated_name_format', 'project_property')->cvterm_id();
        my $material_of_type_id  =  SGN::Model::Cvterm->get_cvterm_row($schema, 'material_of', 'stock_relationship')->cvterm_id;

        if ($linked_project_id) {
            my $new_names_info;
            my $stored_name_format = $schema->resultset('Project::Projectprop')->find({ project_id => $linked_project_id, type_id => $autogenerated_name_format_cvterm_id});
            if (!$stored_name_format) {
                $c->stash->{rest} = {error => "Please set up prefix for autogenerated names for this transformation project before using tracking tool"};
                return;
            } else {
                my $name_format = $stored_name_format->value();
                my $autogenerated_names = CXGN::Transformation::CreateAutogeneratedNames->new({schema => $schema, dbh => $dbh, breeding_program_id => $program_id, name_format => $name_format, number_of_names => $number_of_transformants, source_info => $source_info });
                my $return = $autogenerated_names->create_names();
                if (!$return){
                    $c->stash->{rest} = {error => "Error generating transformant names"};
                    return;
                } elsif ($return->{error}) {
                    $c->stash->{rest} = {error => $return->{error}};
                    return;
                }

                $new_names_info = $return->{new_names};
                my $new_names = $new_names_info->{'new_autogenerated_names'};
                my $new_last_serial_number = $new_names_info->{'new_last_serial_number'};

                my $transformation_stock_id = $schema->resultset("Stock::StockRelationship")->find({object_id=>$tracking_identifier_id, type_id=>$material_of_type_id})->subject_id();
                my $add_transformants = CXGN::Transformation::AddTransformant->new({
                    schema => $schema,
                    phenome_schema => $phenome_schema,
                    dbh => $dbh,
                    transformation_stock_id => $transformation_stock_id,
                    transformant_names => $new_names,
                    owner_id => $user_id,
                });

                $add_transformants->add_transformant();

                my $name_metadata_cvterm = SGN::Model::Cvterm->get_cvterm_row($schema, 'autogenerated_name_metadata', 'project_property');
                my $program = $schema->resultset('Project::Project')->find({ project_id => $program_id});
                my $metadata_projectprop_rs = $program->projectprops({type_id => $name_metadata_cvterm->cvterm_id});
                if ($metadata_projectprop_rs->count == 1){
                    my $stored_name_metadata_string = $metadata_projectprop_rs->first->value();
                    my $name_metadata_hash = decode_json $stored_name_metadata_string;
                    $name_metadata_hash->{$name_format}->{'last_serial_number'} = $new_last_serial_number;
                    my $new_name_metadata_string = encode_json $name_metadata_hash;
                    $metadata_projectprop_rs->first->update({value=>$new_name_metadata_string});
                }
            }
        }
    } elsif ($selected_type eq 'number_of_plantlets') {
        $number_of_plantlets = $input;

        my $tracking_identifier_obj = CXGN::TrackingActivity::TrackingIdentifier->new({schema => $schema, dbh => $dbh, tracking_identifier_stock_id => $tracking_identifier_id});
        my $child_tracking_identifiers = $tracking_identifier_obj->get_child_tracking_identifiers();
        my $number_of_exist_ids = scalar @$child_tracking_identifiers;
        my @new_child_tracking_ids;
        foreach my $n (1..$number_of_plantlets) {
            my $incremented_number = $n + $number_of_exist_ids;
            my $new_id = $tracking_identifier."_".$incremented_number;
            push @new_child_tracking_ids, $new_id;
        }

        foreach my $new_child_identifier (@new_child_tracking_ids) {
            my $tracking_obj = CXGN::TrackingActivity::AddTrackingIdentifier->new({
                schema => $schema,
                phenome_schema => $phenome_schema,
                tracking_identifier => $new_child_identifier,
                parent_tracking_identifier => $tracking_identifier,
                material => $material_name,
                user_id => $user_id
             });

            my $return = $tracking_obj->store_child_identifier();
            if (!$return) {
                $c->stash->{rest} = {error => "Error generating tracking identifier"};
                return;
            } elsif ($return->{error}) {
                my $error = $return->{error};
                $c->stash->{rest} = {error => $error};
                return;
            }
        }
    }
    my $add_activity_info = CXGN::TrackingActivity::ActivityInfo->new({
        schema => $schema,
        tracking_identifier => $tracking_identifier,
        selected_type => $selected_type,
        input => $input,
        timestamp => $record_timestamp,
        operator_id => $user_id,
        notes => $notes,
        activity_type => $activity_type
    });
    my $return = $add_activity_info->add_info();

    if (!$return){
        $c->stash->{rest} = {error => "Error saving info",};
        return;
    } else {
        $c->stash->{rest} = $return;
    }

}


sub get_activity_details :Path('/ajax/tracking_activity/details') :Args(1) {
    my $self = shift;
    my $c = shift;
    my $identifier_id = shift;
    my $schema = $c->dbic_schema('Bio::Chado::Schema', 'sgn_chado');
    my $dbh = $c->dbc->dbh;

    my $tracking_identifier_obj = CXGN::TrackingActivity::TrackingIdentifier->new({schema=>$schema, dbh=>$dbh, tracking_identifier_stock_id=>$identifier_id});
    my $associated_projects = $tracking_identifier_obj->get_associated_project_program();
    my $tracking_project_id = $associated_projects->[0]->[0];
    my $tracking_project = CXGN::TrackingActivity::ActivityProject->new(bcs_schema => $schema, trial_id => $tracking_project_id);
    my $activity_type = $tracking_project->get_project_activity_type();


    my $tracking_activities;
    my $tracking_data_json_cvterm_id;
    if ($activity_type eq 'tissue_culture') {
        $tracking_activities = $c->config->{tracking_tissue_culture_info};
    } elsif ($activity_type eq 'transformation') {
        $tracking_activities = $c->config->{tracking_transformation_info};
    } elsif ($activity_type eq 'propagation') {
        $tracking_activities = $c->config->{tracking_propagation_info};
    }

    my @details;
    my @activity_types = split ',',$tracking_activities;

    my $tracking_identifier_info = $tracking_identifier_obj->get_tracking_identifier_info();
    my $tracking_identifier_stockprop = $tracking_identifier_info->[0]->[5];

    if ($tracking_identifier_stockprop) {
        my $info = JSON::Any->jsonToObj($tracking_identifier_stockprop);
        my %info_hash = %{$info};
        foreach my $type (@activity_types){
            my $empty_string;
            my @each_type_details = ();
            my $each_timestamp_string;
            my $each_type_string;
            if ($info_hash{$type}) {
                my @each_type_details = ();
                my $details = {};
                my %details_hash = ();
                $details = $info_hash{$type};
                %details_hash = %{$details};
                foreach my $timestamp (sort keys %details_hash) {
                    my @each_timestamp_details = ();
                    push @each_timestamp_details, "timestamp".":"."".$timestamp;
                    my $operator_id = $details_hash{$timestamp}{'operator_id'};

                    my $person= CXGN::People::Person->new($dbh, $operator_id);
                    my $operator_name = $person->get_first_name()." ".$person->get_last_name();

                    push @each_timestamp_details, "operator".":"."".$operator_name;
                    my $input = $details_hash{$timestamp}{'input'};
                    push @each_timestamp_details, "input".":"."".$input;
                    my $notes = $details_hash{$timestamp}{'notes'};
                    push @each_timestamp_details, "notes".":"."".$notes;

                    push @each_timestamp_details, $empty_string;

                    $each_timestamp_string = join("<br>", @each_timestamp_details);
                    push @each_type_details, $each_timestamp_string;
                }

                $each_type_string = join("<br>", @each_type_details);
#                print STDERR "EACH TYPE STRING =".Dumper($each_type_string)."\n";
                push @details, $each_type_string;
            } else {
                my $empty_string;
                push @details, $empty_string;
            }
        }
    } else {
        foreach my $type (@activity_types) {
            push @details, 'NA';
        }
    }

    my @all_details;
    push @all_details, [@details];

    $c->stash->{rest} = { data => \@all_details };

}


sub get_activity_summary :Path('/ajax/tracking_activity/summary') :Args(1) {
    my $self = shift;
    my $c = shift;
    my $identifier_id = shift;
    my $schema = $c->dbic_schema('Bio::Chado::Schema', 'sgn_chado');
    my $dbh = $c->dbc->dbh;

    my $tracking_identifier_obj = CXGN::TrackingActivity::TrackingIdentifier->new({schema=>$schema, dbh=>$dbh, tracking_identifier_stock_id=>$identifier_id});
    my $associated_projects = $tracking_identifier_obj->get_associated_project_program();
    my $tracking_project_id = $associated_projects->[0]->[0];
    my $tracking_project = CXGN::TrackingActivity::ActivityProject->new(bcs_schema => $schema, trial_id => $tracking_project_id);
    my $activity_type = $tracking_project->get_project_activity_type();

    my $tracking_activities;
    my $tracking_data_json_cvterm_id;
    if ($activity_type eq 'tissue_culture') {
        $tracking_activities = $c->config->{tracking_tissue_culture_info};
    } elsif ($activity_type eq 'transformation') {
        $tracking_activities = $c->config->{tracking_transformation_info};
    } elsif ($activity_type eq 'propagation') {
        $tracking_activities = $c->config->{tracking_propagation_info};
    }

    my @summary = ();
    my @activity_types = split ',',$tracking_activities;

    my $tracking_identifier_info = $tracking_identifier_obj->get_tracking_identifier_info();
    my $tracking_identifier_stockprop = $tracking_identifier_info->[0]->[5];
    my $material_stock_type = $tracking_identifier_info->[0]->[4];
    my $material_stock_id = $tracking_identifier_info->[0]->[2];

    my $obsoleted_transformant_count;
    if ($material_stock_type eq 'transformation') {
        my $transformation_obj = CXGN::Transformation::Transformation->new({schema=>$schema, dbh=>$dbh, transformation_stock_id=>$material_stock_id});
        my $obsoleted_transformants = $transformation_obj->get_obsoleted_transformants();
        if ($obsoleted_transformants) {
            $obsoleted_transformant_count = scalar @$obsoleted_transformants;
        }
    }

    if ($tracking_identifier_stockprop) {
        my $info = JSON::Any->jsonToObj($tracking_identifier_stockprop);
        my %info_hash = %{$info};
        foreach my $type (@activity_types){
            my $input = '';
            my $empty_string;
            my @each_type_details = ();
            my $each_timestamp_string;
            my $each_type_string;
            if ($info_hash{$type}) {
                my $details = {};
                my %details_hash = ();
                $details = $info_hash{$type};
                %details_hash = %{$details};

                if (($type =~ m/number/) || ($type =~ m/count/)) {
                    $input = 0;
                    foreach my $key (keys %details_hash) {
                        $input += $details_hash{$key}{'input'};
                    }

                    if (($type eq 'number_of_transformants') && ($obsoleted_transformant_count >= 1)) {
                        my @details = ();
                        my $generated_count = 'Selected'. ":"." ".$input;
                        my $obsoleted_count = 'Obsoleted'. ":"." ".$obsoleted_transformant_count;
                        my $current_number = 'Current Number'. ":"." ".($input-=$obsoleted_transformant_count);
                        push @details, ($current_number, $generated_count, $obsoleted_count);
                        my $details_string = join("<br>", @details);
                        push @summary, $details_string;
                    } else {
                        push @summary, $input;
                    }
                } else {
                    foreach my $key (keys %details_hash) {
                        $input = $details_hash{$key}{'input'};
                    }
                    push @summary, $input;
                }
            } else {
                push @summary, $input;
            }
        }
    } else {
        foreach my $type (@activity_types) {
            push @summary, 'NA';
        }
    }

    my @all_summary;
    push @all_summary, [@summary];

    $c->stash->{rest} = { data => \@all_summary };

}

sub get_project_active_identifiers :Path('/ajax/tracking_activity/project_active_identifiers') :Args(1) {
    my $self = shift;
    my $c = shift;
    my $project_id = shift;
    my $schema = $c->dbic_schema('Bio::Chado::Schema', 'sgn_chado');

    my $tracking_project = CXGN::TrackingActivity::ActivityProject->new(bcs_schema => $schema, trial_id => $project_id);
    my $activity_type = $tracking_project->get_project_activity_type();

    my $tracking_activities;
    if ($activity_type eq 'tissue_culture') {
        $tracking_activities = $c->config->{tracking_tissue_culture_info};
    } elsif ($activity_type eq 'transformation') {
        $tracking_activities = $c->config->{tracking_transformation_info};
    } elsif ($activity_type eq 'propagation') {
        $tracking_activities = $c->config->{tracking_propagation_info};
    }

    my @activity_types = split ',',$tracking_activities;
    my $transformation_type_id = SGN::Model::Cvterm->get_cvterm_row($schema, "transformation", 'stock_type')->cvterm_id();

    my $activity_project = CXGN::TrackingActivity::ActivityProject->new(bcs_schema => $schema, trial_id => $project_id);
    my $all_identifier_info = $activity_project->get_project_active_identifiers();
    my @all_identifiers;
    foreach my $identifier_info (@$all_identifier_info) {
        my @row = ();
        my $identifier_id = $identifier_info->[0];
        my $identifier_name = $identifier_info->[1];
        push @row, qq{<a href="/activity/details/$identifier_id">$identifier_name</a>};

        my $material_id = $identifier_info->[2];
        my $material_rs = $schema->resultset("Stock::Stock")->find( { stock_id => $material_id });
        my $material_stock_type_id = $material_rs->type_id;
        my $material_name = $identifier_info->[3];
        if ($material_stock_type_id == $transformation_type_id) {
            push @row, qq{<a href="/transformation/$material_id">$material_name</a>}
        } else {
            push @row, qq{<a href="/stock/$material_id/view">$material_name</a>};
        }
        my $progress = $identifier_info->[5];
        if ($progress) {
            my $progress_ref = JSON::Any->jsonToObj($progress);
            my %progress_hash = %{$progress_ref};
            foreach my $type (@activity_types){
                my $input = '';
                if ($progress_hash{$type}) {
                    my $details = {};
                    my %details_hash = ();
                    $details = $progress_hash{$type};
                    %details_hash = %{$details};

                    if (($type =~ m/number/) || ($type =~ m/count/)) {
                        $input = 0;
                        foreach my $key (keys %details_hash) {
                            $input += $details_hash{$key}{'input'};
                        }
                        push @row, $input;
                     } else {
                        foreach my $key (keys %details_hash) {
                            $input = $details_hash{$key}{'input'};
                        }
                        push @row, $input;
                    }
                } else {
                    push @row, $input;
                }
            }
        } else {
            foreach my $type (@activity_types) {
                push @row, '';
            }
        }
        push @row, $identifier_name;
        push @all_identifiers,[@row];
    }

    $c->stash->{rest} = { data => \@all_identifiers };

}


sub get_project_active_identifier_names :Path('/ajax/tracking_activity/project_active_identifier_names') :Args(1) {
    my $self = shift;
    my $c = shift;
    my $project_id = shift;
    my $schema = $c->dbic_schema('Bio::Chado::Schema', 'sgn_chado');

    my $activity_project = CXGN::TrackingActivity::ActivityProject->new(bcs_schema => $schema, trial_id => $project_id);
    my $all_identifier_info = $activity_project->get_project_active_identifiers();
    my @identifier_names;
    foreach my $identifier_info (@$all_identifier_info) {
        push @identifier_names, $identifier_info->[1];
    }

    $c->stash->{rest} = { data => \@identifier_names };

}


sub update_status : Path('/ajax/tracking_activity/update_status') : ActionClass('REST'){ }

sub update_status_POST : Args(0) {
    my $self = shift;
    my $c = shift;
    my $schema = $c->dbic_schema('Bio::Chado::Schema', 'sgn_chado');
    my $dbh = $c->dbc->dbh();
    my $identifier_id = $c->req->param("identifier_id");
    my $status_type = $c->req->param("status_type");
    my $comments = $c->req->param("comments");
    my $material_id = $c->req->param("material_id");
    my $program_name = $c->req->param("program_name");
    my $time = DateTime->now();
    my $update_date = $time->ymd();
    my @stocks_to_update;

    if (!$c->user()){
        $c->stash->{rest} = { error_string => "You must be logged in to update status" };
        return;
    }
    if (!$c->user()->check_roles("curator")) {
        $c->stash->{rest} = { error_string => "You do not have the correct role to update status. Please contact us." };
        return;
    }

    my @user_roles = $c->user->roles();
    my %has_roles = ();
    map { $has_roles{$_} = 1; } @user_roles;

    if (! ( (exists($has_roles{$program_name}) && exists($has_roles{submitter})) || exists($has_roles{curator}))) {
        $c->stash->{rest} = { error => "You need to be either a curator, or a submitter associated with breeding program $program_name to update status." };
        return;
    }

    my $user_id = $c->user()->get_object()->get_sp_person_id();

    my $tracking_identifier_type_id = SGN::Model::Cvterm->get_cvterm_row($schema, "tracking_identifier", 'stock_type')->cvterm_id();
    my $transformation_type_id = SGN::Model::Cvterm->get_cvterm_row($schema, "transformation", 'stock_type')->cvterm_id();

    my $identifier_rs = $schema->resultset("Stock::Stock")->find( { stock_id => $identifier_id, type_id => $tracking_identifier_type_id });
    if (!$identifier_rs) {
        $c->stash->{rest} = { error_string => 'Error. No tracking identifier entry found in the database.' };
	    return;
    } else {
        push @stocks_to_update, $identifier_id;
    }

    my $material_stock_type_id;
    my $material_rs = $schema->resultset("Stock::Stock")->find( { stock_id => $material_id });
    if (!$material_rs) {
        $c->stash->{rest} = { error_string => 'Error. No material entry found in the database.' };
        return;
    } else {
       $material_stock_type_id = $material_rs->type_id;
    }

    if ($material_stock_type_id == $transformation_type_id) {
        push @stocks_to_update, $material_id;
    }

    my $completed_metadata;
    my $terminated_metadata;
    if ($status_type eq 'completed') {
        $completed_metadata = 1;
    } elsif ($status_type eq 'terminated') {
        $terminated_metadata = 1;
    }

    foreach my $stock_id (@stocks_to_update) {
        my $update_status = CXGN::Stock::Status->new({
            bcs_schema => $schema,
            parent_id => $stock_id,
            person_id => $user_id,
            update_date => $update_date,
            comments => $comments,
            completed_metadata => $completed_metadata,
            terminated_metadata => $terminated_metadata
        });

        $update_status->store();

        if (!$update_status->store()){
            $c->stash->{rest} = {error_string => "Error updating status"};
            return;
        }
    }

    $c->stash->{rest} = {success => "1",};

}

sub reverse_status : Path('/ajax/tracking_activity/reverse_status') : ActionClass('REST'){ }

sub reverse_status_POST : Args(0) {
    my $self = shift;
    my $c = shift;
    my $schema = $c->dbic_schema('Bio::Chado::Schema', 'sgn_chado');
    my $dbh = $c->dbc->dbh();
    my $identifier_id = $c->req->param("identifier_id");
    my $updated_status_type = $c->req->param("updated_status_type");
    my $material_id = $c->req->param("material_id");
    my $program_name = $c->req->param("program_name");

    if (!$c->user()){
        $c->stash->{rest} = { error_string => "You must be logged in to reverse status of this tracking identifier" };
        return;
    }
    if (!$c->user()->check_roles("curator")) {
        $c->stash->{rest} = { error_string => "You do not have the correct role to reverse status of this tracking identifier. Please contact us." };
        return;
    }

    my @user_roles = $c->user->roles();
    my %has_roles = ();
    map { $has_roles{$_} = 1; } @user_roles;

    if (! ( (exists($has_roles{$program_name}) && exists($has_roles{submitter})) || exists($has_roles{curator}))) {
        $c->stash->{rest} = { error => "You need to be either a curator, or a submitter associated with breeding program $program_name to update status." };
        return;
    }

    my $user_id = $c->user()->get_object()->get_sp_person_id();

    my $status_type_id;
    if ($updated_status_type) {
        $status_type_id = SGN::Model::Cvterm->get_cvterm_row($schema, $updated_status_type, 'stock_property')->cvterm_id();
        my $status_stockprop_rs = $schema->resultset("Stock::Stockprop")->find({stock_id => $identifier_id, type_id => $status_type_id});

        if (defined $status_stockprop_rs->stockprop_id) {
            $status_stockprop_rs->delete();
        }
    }

    my $material_stock_type_id;
    my $material_rs = $schema->resultset("Stock::Stock")->find( { stock_id => $material_id });
    if (!$material_rs) {
        $c->stash->{rest} = { error_string => 'Error. No material entry found in the database.' };
        return;
    } else {
       $material_stock_type_id = $material_rs->type_id;
    }

    my $transformation_type_id = SGN::Model::Cvterm->get_cvterm_row($schema, "transformation", 'stock_type')->cvterm_id();

    if ($material_stock_type_id == $transformation_type_id) {
        if ($status_type_id) {
            my $transformation_stockprop_rs = $schema->resultset("Stock::Stockprop")->find({stock_id => $material_id, type_id => $status_type_id});

            if (defined $transformation_stockprop_rs->stockprop_id) {
                $transformation_stockprop_rs->delete();
            }
        }
    }

    $c->stash->{rest} = { success => 1 };

}


sub get_project_inactive_identifiers :Path('/ajax/tracking_activity/project_inactive_identifiers') :Args(1) {
    my $self = shift;
    my $c = shift;
    my $project_id = shift;
    my $schema = $c->dbic_schema('Bio::Chado::Schema', 'sgn_chado');

    my $tracking_project = CXGN::TrackingActivity::ActivityProject->new(bcs_schema => $schema, trial_id => $project_id);
    my $activity_type = $tracking_project->get_project_activity_type();

    my $tracking_activities;
    if ($activity_type eq 'tissue_culture') {
        $tracking_activities = $c->config->{tracking_tissue_culture_info};
    } elsif ($activity_type eq 'transformation') {
        $tracking_activities = $c->config->{tracking_transformation_info};
    } elsif ($activity_type eq 'propagation') {
        $tracking_activities = $c->config->{tracking_propagation_info};
    }

    my @activity_types = split ',',$tracking_activities;

    my $transformation_type_id = SGN::Model::Cvterm->get_cvterm_row($schema, "transformation", 'stock_type')->cvterm_id();

    my $activity_project = CXGN::TrackingActivity::ActivityProject->new(bcs_schema => $schema, trial_id => $project_id);
    my $all_identifier_info = $activity_project->get_project_inactive_identifiers();
    my @all_identifiers;
    foreach my $identifier_info (@$all_identifier_info) {
        my @row = ();
        my $identifier_id = $identifier_info->[0];
        my $identifier_name = $identifier_info->[1];
        push @row, qq{<a href="/activity/details/$identifier_id">$identifier_name</a>};

        my $status = $identifier_info->[6];
        if ($status eq 'terminated_metadata') {
            $status = '<span style="color:red">'.'TERMINATED'.'</span>';
        } elsif ($status eq 'completed_metadata') {
            $status = '<span style="color:red">'.'COMPLETED'.'</span>';
        }
        push @row, $status;

        my $material_id = $identifier_info->[2];
        my $material_name = $identifier_info->[3];
        my $material_rs = $schema->resultset("Stock::Stock")->find( { stock_id => $material_id });
        my $material_stock_type_id = $material_rs->type_id;
        if ($material_stock_type_id == $transformation_type_id) {
            push @row, qq{<a href="/transformation/$material_id">$material_name</a>}
        } else {
            push @row, qq{<a href="/stock/$material_id/view">$material_name</a>};
        }

        my $progress = $identifier_info->[5];
        if ($progress) {
            my $progress_ref = JSON::Any->jsonToObj($progress);
            my %progress_hash = %{$progress_ref};
            foreach my $type (@activity_types){
                my $input = '';
                if ($progress_hash{$type}) {
                    my $details = {};
                    my %details_hash = ();
                    $details = $progress_hash{$type};
                    %details_hash = %{$details};

                    if (($type =~ m/number/) || ($type =~ m/count/)) {
                        $input = 0;
                        foreach my $key (keys %details_hash) {
                            $input += $details_hash{$key}{'input'};
                        }
                        push @row, $input;
                    } elsif ($type =~ m/date/) {
                        foreach my $key (keys %details_hash) {
                            $input = $details_hash{$key}{'input'};
                        }
                        push @row, $input;
                    }
                } else {
                    push @row, $input;
                }
            }
        } else {
            foreach my $type (@activity_types) {
                push @row, '';
            }
        }
        push @row, $identifier_name;
        push @all_identifiers,[@row];
    }

    $c->stash->{rest} = { data => \@all_identifiers };

}


sub get_plantlets :Path('/ajax/tracking_activity/plantlets') :Args(1) {
    my $self = shift;
    my $c = shift;
    my $identifier_id = shift;
    my $schema = $c->dbic_schema('Bio::Chado::Schema', 'sgn_chado');
    my $dbh = $c->dbc->dbh;

    my $tracking_identifier_obj = CXGN::TrackingActivity::TrackingIdentifier->new({schema=>$schema, dbh=>$dbh, tracking_identifier_stock_id=>$identifier_id});
    my $ids = $tracking_identifier_obj->get_child_tracking_identifiers();
    my @all_ids;
    foreach my $id (@$ids) {
        my $identifier_id = $id->[0];
        my $identifier_name = $id->[1];
        push @all_ids, [qq{<a href="/activity/details/$identifier_id">$identifier_name</a>}];

    }

    $c->stash->{rest} = { data => \@all_ids };

}


1;
