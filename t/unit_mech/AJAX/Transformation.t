use strict;
use warnings;

use lib 't/lib';
use SGN::Test::Fixture;
use Test::More;
use Test::WWW::Mechanize;
use Data::Dumper;
use DateTime;
use JSON;
use SGN::Model::Cvterm;
use CXGN::Transformation::Transformation;
use CXGN::Transformation::AddAutogeneratedNameMetadata;

local $Data::Dumper::Indent = 0;

my $f = SGN::Test::Fixture->new();
my $schema = $f->bcs_schema;
my $dbh = $schema->storage->dbh;
my $people_schema = $f->people_schema;
my $phenome_schema = $f->phenome_schema;

my $mech = Test::WWW::Mechanize->new;
my $json = JSON->new->allow_nonref;
my @all_new_stocks;

$mech->post_ok('http://localhost:3010/brapi/v1/token', [ "username"=> "janedoe", "password"=> "secretpw", "grant_type"=> "password" ]);
my $response = decode_json $mech->content;
is($response->{'metadata'}->{'status'}->[2]->{'message'}, 'Login Successfull');
my $sgn_session_id = $response->{access_token};

my $location_rs = $schema->resultset('NaturalDiversity::NdGeolocation')->search({description => 'Cornell Biotech'});
my $location_id = $location_rs->first->nd_geolocation_id;

my $bp_rs = $schema->resultset('Project::Project')->search({name => 'test'});
my $breeding_program_id = $bp_rs->first->project_id;

#test adding project
$mech->post_ok('http://localhost:3010/ajax/transformation/add_transformation_project', [ 'project_name' => 'transformation_project_1', 'project_program_id' => 134,
    'project_location' => 'test_location', 'year' => '2024', 'project_description' => 'test transformation' ]);

$response = decode_json $mech->content;
is($response->{'success'}, '1');

my $project_rs = $schema->resultset('Project::Project')->find({ name => 'transformation_project_1' });
my $project_id = $project_rs->project_id();

#storing autogenerated name metadata
my $text_attribute = {};
$text_attribute->{'text'} = 'BTI';

my @name_attributes = ('vectorConstruct', $text_attribute);

my $time = DateTime->now();
my $date = $time->ymd();

my $add_autogenerated_name_metadata = CXGN::Transformation::AddAutogeneratedNameMetadata->new({
    schema => $schema,
    dbh => $dbh,
    breeding_program_id => $breeding_program_id,
    format_name => 'bti_transformant_names',
    description => 'test',
    name_type => 'transformant',
    name_attributes => \@name_attributes,
    last_serial_number => 0,
    added_by => 41,
    date => $date
});

my $return = $add_autogenerated_name_metadata->add_info();
is($return->{'success'}, '1');

#set naming format
$mech->post_ok('http://localhost:3010/ajax/transformation/set_autogenerated_name_format', [ 'project_id' => $project_id, 'program_name' => 'test',
    'name_format' => 'bti_transformant_names']);

$response = decode_json $mech->content;
is($response->{'success'}, '1');

#test adding transformation id
#adding vector construct for testing
my $vector_construct_type_id = SGN::Model::Cvterm->get_cvterm_row($schema, "vector_construct", "stock_type")->cvterm_id();
ok(my $organism = $schema->resultset("Organism::Organism")->find_or_create({
    genus   => 'Test_genus',
    species => 'Test_genus test_species',
},));

my $new_vector_construct = $schema->resultset('Stock::Stock')->create({
    organism_id => $organism->organism_id,
    name => 'TT1',
    uniquename => 'TT1',
    type_id     => $vector_construct_type_id,
});

my $vector_construct_rs = $schema->resultset('Stock::Stock')->find({ name => 'TT1' });
my $vector_stock_id = $vector_construct_rs->stock_id();
push @all_new_stocks, $vector_stock_id;

my $transformation_type_id = SGN::Model::Cvterm->get_cvterm_row($schema, "transformation", "stock_type")->cvterm_id();
my $before_adding_transformation_id = $schema->resultset("Stock::Stock")->search({ type_id => $transformation_type_id })->count();
my $before_adding_transformation_id_relationship = $schema->resultset("Stock::StockRelationship")->search({})->count();

$mech->post_ok('http://localhost:3010/ajax/transformation/add_transformation_identifier', [ 'transformation_identifier' => 'UG1TT1', 'plant_material' => 'UG120001', 'vector_construct' => 'TT1', 'notes' => 'test', 'transformation_project_id' => $project_id]);

$response = decode_json $mech->content;
is($response->{'success'}, '1');

my $transformation_rs = $schema->resultset('Stock::Stock')->find({name => 'UG1TT1'});
my $transformation_stock_id = $transformation_rs->stock_id();
push @all_new_stocks, $transformation_stock_id;

my $after_adding_transformation_id = $schema->resultset("Stock::Stock")->search({ type_id => $transformation_type_id })->count();
is($after_adding_transformation_id, $before_adding_transformation_id + 1);
my $after_adding_transformation_id_relationship = $schema->resultset("Stock::StockRelationship")->search({})->count();
is($after_adding_transformation_id_relationship, $before_adding_transformation_id_relationship + 2);

#test adding transformants (accessions)
my $source_info_hash = {};
$source_info_hash->{'breedingProgram'} = 'test';
$source_info_hash->{'transformationProject'} = 'transformation_project_1';
$source_info_hash->{'transformationID'} = 'UG1TT1';
$source_info_hash->{'vectorConstruct'} = 'TT1';
$source_info_hash->{'plantMaterial'} = 'UGd120001';
my $source_info_string = encode_json $source_info_hash;

$mech->post_ok('http://localhost:3010/ajax/transformation/add_transformants', [ 'program_name' => 'test', 'program_id' => $breeding_program_id, 'transformation_stock_id' => $transformation_stock_id, 'new_name_count' => 2, 'source_info' => $source_info_string, 'name_format' => 'bti_transformant_names']);

$response = decode_json $mech->content;
is($response->{'success'}, '1');

#retrieving transformation info
$mech->post_ok("http://localhost:3010/ajax/transformation/active_transformations_in_project/$project_id");

$response = decode_json $mech->content;
my $transformation = $response->{'data'};
my $transformation_id_count = scalar(@$transformation);
is($transformation_id_count, '1');

$mech->post_ok("http://localhost:3010/ajax/transformation/transformants/$transformation_stock_id");

$response = decode_json $mech->content;
my $transformants = $response->{'data'};
my $transformant_count = scalar(@$transformants);
is($transformant_count, '2');

my $transformant = $transformants->[0];
my $transformant_stock_id = $transformant->{transformant_id};

#retrieving related accessions for vector page
$mech->get_ok("http://localhost:3010/stock/$vector_stock_id/datatables/vector_related_accessions");
$response = decode_json $mech->content;
my $related_stocks = $response->{'data'};
my $related_stock_count = scalar(@$related_stocks);
is($related_stock_count, '2');

#obsolete a transformant
$mech->get_ok('http://localhost:3010/stock/obsolete?stock_id='.$transformant_stock_id.'&is_obsolete=1'.'&obsolete_note="test"');
$response = decode_json $mech->content;
is($response->{'success'}, '1');

#retrieving related accessions for vector page after obsoleting a transformant
$mech->get_ok("http://localhost:3010/stock/$vector_stock_id/datatables/vector_related_accessions");
$response = decode_json $mech->content;
my $related_accessions = $response->{'data'};
my $related_accessions_count = scalar(@$related_accessions);
is($related_accessions_count, '1');

#retrieving obsoleted accessions for vector page
$mech->get_ok("http://localhost:3010/stock/$vector_stock_id/datatables/vector_obsoleted_accessions");
$response = decode_json $mech->content;
my $obsoleted_accessions = $response->{'data'};
my $obsoleted_accession_count = scalar(@$obsoleted_accessions);
is($obsoleted_accession_count, '1');

#creating project and transformation ID without associated data for tesing deletion
$mech->post_ok('http://localhost:3010/ajax/transformation/add_transformation_identifier', [ 'transformation_identifier' => 'UG1TT1_2', 'plant_material' => 'UG120001', 'vector_construct' => 'TT1', 'notes' => 'test', 'transformation_project_id' => $project_id]);
$response = decode_json $mech->content;
is($response->{'success'}, '1');
my $transformation_rs_2 = $schema->resultset('Stock::Stock')->find({name => 'UG1TT1_2'});
my $transformation_stock_id_2 = $transformation_rs_2->stock_id();

$mech->post_ok('http://localhost:3010/ajax/transformation/add_transformation_project', [ 'project_name' => 'transformation_project_2', 'project_program_id' => 134, 'project_location' => 'test_location', 'year' => '2024', 'project_description' => 'test transformation' ]);
$response = decode_json $mech->content;
is($response->{'success'}, '1');
my $project_rs_2 = $schema->resultset('Project::Project')->find({ name => 'transformation_project_2' });
my $project_id_2 = $project_rs_2->project_id();

my $before_deleting_stocks = $schema->resultset("Stock::Stock")->search({})->count();
my $before_deleting_stockprop = $schema->resultset("Stock::Stockprop")->search({})->count();
my $before_deleting_relationship = $schema->resultset("Stock::StockRelationship")->search({})->count();
my $before_deleting_experiment = $schema->resultset("NaturalDiversity::NdExperiment")->search({})->count();
my $before_deleting_experiment_stock = $schema->resultset("NaturalDiversity::NdExperimentStock")->search({})->count();

my $before_deleting_project = $schema->resultset("Project::Project")->search({})->count();

$mech->post_ok('http://localhost:3010/ajax/transformation/delete', ['transformation_stock_id' => $transformation_stock_id]);
$response = decode_json $mech->content;
is($response->{'error'}, 'An error occurred attempting to delete the transformation ID. (Transformation ID has associated transformants. Cannot delete.
)');

my $after_invalid_deleting_stocks = $schema->resultset("Stock::Stock")->search({})->count();
my $after_invalid_deleting_stockprop = $schema->resultset("Stock::Stockprop")->search({})->count();
my $after_invalid_deleting_relationship = $schema->resultset("Stock::StockRelationship")->search({})->count();
my $after_invalid_deleting_experiment = $schema->resultset("NaturalDiversity::NdExperiment")->search({})->count();
my $after_invalid_deleting_experiment_stock = $schema->resultset("NaturalDiversity::NdExperimentStock")->search({})->count();

is($after_invalid_deleting_stocks, $before_deleting_stocks);
is($after_invalid_deleting_stockprop, $before_deleting_stockprop);
is($after_invalid_deleting_relationship, $before_deleting_relationship);
is($after_invalid_deleting_experiment, $before_deleting_experiment);
is($after_invalid_deleting_experiment_stock, $before_deleting_experiment_stock);

#test deleting transformation ID without associated transformants
$mech->post_ok('http://localhost:3010/ajax/transformation/delete', ['transformation_stock_id' => $transformation_stock_id_2]);
$response = decode_json $mech->content;
is($response->{'success'}, '1');

my $after_deleting_stocks = $schema->resultset("Stock::Stock")->search({})->count();
my $after_deleting_stockprop = $schema->resultset("Stock::Stockprop")->search({})->count();
my $after_deleting_relationship = $schema->resultset("Stock::StockRelationship")->search({})->count();
my $after_deleting_experiment = $schema->resultset("NaturalDiversity::NdExperiment")->search({})->count();
my $after_deleting_experiment_stock = $schema->resultset("NaturalDiversity::NdExperimentStock")->search({})->count();

is($after_deleting_stocks, $before_deleting_stocks-1);
is($after_deleting_stockprop, $before_deleting_stockprop-1);
is($after_deleting_relationship, $before_deleting_relationship-2);
is($after_deleting_experiment, $before_deleting_experiment-1);
is($after_deleting_experiment_stock, $before_deleting_experiment_stock-1);

#test deleting project with associated transformation id
$mech->get_ok("http://localhost:3010/ajax/breeders/trial/$project_id/delete/transformation_project");
$response = decode_json $mech->content;
is($response->{'error'}, 'Cannot delete transformation project with associated transformation IDs.');

my $after_invalid_deleting_project = $schema->resultset("Project::Project")->search({})->count();

is($after_invalid_deleting_project, $before_deleting_project);

#test deleting project without associated transformation id

$mech->get_ok("http://localhost:3010/ajax/breeders/trial/$project_id_2/delete/transformation_project");
$response = decode_json $mech->content;
is($response->{'success'}, '1');

my $after_deleting_project = $schema->resultset("Project::Project")->search({})->count();

is($after_deleting_project, $before_deleting_project-1);

#deleting project, transformation_id, vector_construct, transformants
my $project_owner = $phenome_schema->resultset('ProjectOwner')->find({ project_id => $project_id });
$project_owner->delete();
$project_rs->delete();

my $transformation_obj = CXGN::Transformation::Transformation->new({schema=>$schema, dbh=>$dbh, transformation_stock_id=>$transformation_stock_id});
my $result = $transformation_obj->transformants();
foreach my $transformant (@$result) {
    push @all_new_stocks, $transformant->[0];
}
#print STDERR "ALL NEW STOCKS =".Dumper(\@all_new_stocks)."\n";
my $dbh = $schema->storage->dbh;
my $q = "delete from phenome.stock_owner where stock_id=?";
my $h = $dbh->prepare($q);

foreach (@all_new_stocks){
    my $row  = $schema->resultset('Stock::Stock')->find({stock_id=>$_});
    $h->execute($_);
    $row->delete();
}


$f->clean_up_db();


done_testing();
